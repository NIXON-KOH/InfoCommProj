@model List<TryMeBitch.Models.Blockchain.BlockChainEvent>
@{
    ViewData["Title"] = "Blockchain Dashboard";
}

<div class="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-50 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900">
    <!-- Enhanced Header -->
    <header class="bg-white/80 dark:bg-gray-900/80 backdrop-blur-xl border-b border-gray-200/50 dark:border-gray-700/50 shadow-lg">
        <div class="container mx-auto px-6 py-4">
            <div class="flex items-center justify-between">
                <div class="flex items-center space-x-4">
                    <div class="relative">
                        <div class="w-12 h-12 bg-gradient-to-r from-blue-600 via-purple-600 to-blue-800 rounded-xl flex items-center justify-center shadow-lg">
                            <svg class="w-7 h-7 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z" />
                            </svg>
                        </div>
                        <div class="absolute -top-1 -right-1 w-4 h-4 bg-green-500 rounded-full animate-pulse shadow-lg"></div>
                    </div>
                    <div>
                        <h1 class="text-3xl font-bold bg-gradient-to-r from-gray-900 to-gray-600 dark:from-white dark:to-gray-300 bg-clip-text text-transparent">
                            Blockchain Dashboard
                        </h1>
                        <p class="text-sm text-gray-600 dark:text-gray-400 mt-1">Real-time blockchain validation & monitoring</p>
                    </div>
                </div>

            </div>
        </div>
    </header>

    <div class="container mx-auto p-6 space-y-8">
        <!-- Enhanced Quick Actions Bar -->
        <div class="bg-white/60 dark:bg-gray-800/60 backdrop-blur-xl rounded-2xl shadow-xl border border-white/20 dark:border-gray-700/30 p-6">
            <div class="flex flex-wrap items-center justify-between gap-6">
                <div class="flex flex-wrap items-center gap-4">
                    <button id="validateBtn" onclick="validateBlockchain()"
                            class="group relative inline-flex items-center px-6 py-3 bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white font-semibold rounded-xl transition-all duration-300 transform hover:scale-105 hover:shadow-xl focus:ring-4 focus:ring-blue-500/30">
                        <svg class="w-5 h-5 mr-3 transition-transform group-hover:rotate-12" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>
                        Validate Blockchain
                        <div class="absolute inset-0 rounded-xl bg-gradient-to-r from-blue-600 to-blue-700 opacity-0 group-hover:opacity-20 transition-opacity"></div>
                    </button>

                    <button id="tamperBtn" onclick="Tamper()"
                            class="group relative inline-flex items-center px-6 py-3 bg-gradient-to-r from-amber-500 to-orange-600 hover:from-amber-600 hover:to-orange-700 text-white font-semibold rounded-xl transition-all duration-300 transform hover:scale-105 hover:shadow-xl focus:ring-4 focus:ring-amber-500/30">
                        <svg class="w-5 h-5 mr-3 transition-transform group-hover:rotate-12" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16c-.77.833.192 2.5 1.732 2.5z" />
                        </svg>
                        Tamper Chain
                    </button>

                    <button id="fixAllBtn" onclick="fixAllIssues()"
                            class="hidden group relative inline-flex items-center px-6 py-3 bg-gradient-to-r from-green-600 to-emerald-700 hover:from-green-700 hover:to-emerald-800 text-white font-semibold rounded-xl transition-all duration-300 transform hover:scale-105 hover:shadow-xl focus:ring-4 focus:ring-green-500/30">
                        <svg class="w-5 h-5 mr-3 transition-transform group-hover:rotate-12" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z" />
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                        </svg>
                        Fix All Issues
                    </button>

                    <button id="toggleIssuesBtn"
                            class="hidden group relative inline-flex items-center px-6 py-3 bg-gradient-to-r from-red-500 to-rose-600 hover:from-red-600 hover:to-rose-700 text-white font-semibold rounded-xl transition-all duration-300 transform hover:scale-105 hover:shadow-xl focus:ring-4 focus:ring-red-500/30">
                        <svg class="w-5 h-5 mr-3 transition-transform group-hover:rotate-12" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>
                        View Issues
                    </button>
                </div>
            </div>
        </div>

        <!-- NEW: Time Series Chart Section -->
        <div class="bg-white/60 dark:bg-gray-800/60 backdrop-blur-xl shadow-2xl rounded-2xl border border-white/20 dark:border-gray-700/30 overflow-hidden">
            <div class="bg-gradient-to-r from-cyan-500/10 to-blue-500/10 dark:from-cyan-500/20 dark:to-blue-500/20 p-6 border-b border-gray-200/30 dark:border-gray-700/30">
                <div class="flex items-center justify-between">
                    <div class="flex items-center space-x-3">
                        <div class="p-2 bg-cyan-100 dark:bg-cyan-900/30 rounded-lg">
                            <svg class="w-5 h-5 text-cyan-600 dark:text-cyan-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2-2V7a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 002 2h2a2 2 0 002-2V7a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 00-2 2h-2a2 2 0 00-2 2v6a2 2 0 01-2 2H9z" />
                            </svg>
                        </div>
                        <div>
                            <h2 class="text-xl font-bold text-gray-900 dark:text-white">Transaction Volume Over Time</h2>
                            <p class="text-sm text-gray-600 dark:text-gray-400">Hourly transaction count visualization</p>
                        </div>
                    </div>
                    <div class="flex items-center space-x-4">
                        <select id="chartTimeframe"
                                class="px-3 py-2 bg-white/80 dark:bg-gray-800/80 border border-gray-300/50 dark:border-gray-600/50 rounded-lg text-sm text-gray-900 dark:text-white focus:ring-2 focus:ring-cyan-500/30 focus:border-cyan-500 transition-all duration-200 backdrop-blur-sm">
                            <option value="hour">Last 24 Hours</option>
                            <option value="day">Last 7 Days</option>
                            <option value="week">Last 4 Weeks</option>
                        </select>
                    </div>
                </div>
            </div>

            <div class="p-6">
                <div class="relative">
                    <canvas id="timeChart" width="800" height="300" class="w-full"></canvas>
                    <div id="chartLoading" class="absolute inset-0 flex items-center justify-center bg-white/50 dark:bg-gray-800/50 backdrop-blur-sm hidden">
                        <div class="flex items-center space-x-2">
                            <div class="animate-spin rounded-full h-6 w-6 border-b-2 border-cyan-600"></div>
                            <span class="text-gray-600 dark:text-gray-400">Updating chart...</span>
                        </div>
                    </div>
                </div>

                <!-- Chart Statistics -->
                <div class="grid grid-cols-1 md:grid-cols-4 gap-4 mt-6 pt-6 border-t border-gray-200/30 dark:border-gray-700/30">
                    <div class="text-center p-4 bg-gradient-to-br from-blue-50/50 to-cyan-50/50 dark:from-blue-900/20 dark:to-cyan-900/20 rounded-xl backdrop-blur-sm">
                        <div class="text-2xl font-bold text-blue-600 dark:text-blue-400" id="totalTransactions">0</div>
                        <div class="text-xs text-gray-600 dark:text-gray-400 font-medium">Total Transactions</div>
                    </div>
                    <div class="text-center p-4 bg-gradient-to-br from-green-50/50 to-emerald-50/50 dark:from-green-900/20 dark:to-emerald-900/20 rounded-xl backdrop-blur-sm">
                        <div class="text-2xl font-bold text-green-600 dark:text-green-400" id="avgPerHour">0</div>
                        <div class="text-xs text-gray-600 dark:text-gray-400 font-medium">Avg per Hour</div>
                    </div>
                    <div class="text-center p-4 bg-gradient-to-br from-purple-50/50 to-pink-50/50 dark:from-purple-900/20 dark:to-pink-900/20 rounded-xl backdrop-blur-sm">
                        <div class="text-2xl font-bold text-purple-600 dark:text-purple-400" id="peakHour">0</div>
                        <div class="text-xs text-gray-600 dark:text-gray-400 font-medium">Peak Hour</div>
                    </div>
                    <div class="text-center p-4 bg-gradient-to-br from-amber-50/50 to-orange-50/50 dark:from-amber-900/20 dark:to-orange-900/20 rounded-xl backdrop-blur-sm">
                        <div class="text-2xl font-bold text-amber-600 dark:text-amber-400" id="lastHour">0</div>
                        <div class="text-xs text-gray-600 dark:text-gray-400 font-medium">Last Hour</div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Enhanced Main Grid -->
        <div class="grid grid-cols-1 lg:grid-cols-4 gap-8">
            <!-- Enhanced Search & Filters -->
            <div class="lg:col-span-1 space-y-6">
                <div class="bg-white/60 dark:bg-gray-800/60 backdrop-blur-xl shadow-2xl rounded-2xl border border-white/20 dark:border-gray-700/30 overflow-hidden">
                    <div class="bg-gradient-to-r from-indigo-500/10 to-purple-500/10 dark:from-indigo-500/20 dark:to-purple-500/20 p-6 border-b border-gray-200/30 dark:border-gray-700/30">
                        <div class="flex items-center space-x-3">
                            <div class="p-2 bg-indigo-100 dark:bg-indigo-900/30 rounded-lg">
                                <svg class="w-5 h-5 text-indigo-600 dark:text-indigo-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.207A1 1 0 013 6.5V4z" />
                                </svg>
                            </div>
                            <h2 class="text-xl font-bold text-gray-900 dark:text-white">Search & Filters</h2>
                        </div>
                    </div>

                    <div class="p-6 space-y-6">
                        <div class="space-y-3">
                            <label class="block text-sm font-semibold text-gray-700 dark:text-gray-300">Search Events</label>
                            <div class="relative">
                                <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                    <svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                                    </svg>
                                </div>
                                <input id="searchText" type="search" placeholder="Card ID / Event ID / Station"
                                       class="w-full pl-10 pr-4 py-3 bg-gray-50/50 dark:bg-gray-700/50 border border-gray-200 dark:border-gray-600 rounded-xl text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 focus:ring-2 focus:ring-blue-500/30 focus:border-blue-500 transition-all duration-200 backdrop-blur-sm" />
                            </div>
                        </div>

                        <div class="grid grid-cols-1 gap-4">
                            <div class="space-y-3">
                                <label class="block text-sm font-semibold text-gray-700 dark:text-gray-300">From Date</label>
                                <input id="fromDate" type="datetime-local"
                                       class="w-full px-4 py-3 bg-gray-50/50 dark:bg-gray-700/50 border border-gray-200 dark:border-gray-600 rounded-xl text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500/30 focus:border-blue-500 transition-all duration-200 backdrop-blur-sm" />
                            </div>
                            <div class="space-y-3">
                                <label class="block text-sm font-semibold text-gray-700 dark:text-gray-300">To Date</label>
                                <input id="toDate" type="datetime-local"
                                       class="w-full px-4 py-3 bg-gray-50/50 dark:bg-gray-700/50 border border-gray-200 dark:border-gray-600 rounded-xl text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500/30 focus:border-blue-500 transition-all duration-200 backdrop-blur-sm" />
                            </div>
                        </div>

                        <div class="flex space-x-3">
                            <button id="applyFilter"
                                    class="flex-1 bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white font-semibold py-3 px-4 rounded-xl transition-all duration-200 transform hover:scale-105 focus:ring-4 focus:ring-blue-500/30">
                                Apply
                            </button>
                            <button id="clearFilter"
                                    class="flex-1 bg-gray-200/80 hover:bg-gray-300/80 dark:bg-gray-700/80 dark:hover:bg-gray-600/80 text-gray-800 dark:text-gray-200 font-semibold py-3 px-4 rounded-xl transition-all duration-200 backdrop-blur-sm">
                                Clear
                            </button>
                        </div>

                        <div id="filterSummary" class="min-h-[3rem] p-4 bg-blue-50/50 dark:bg-blue-900/20 rounded-xl border border-blue-200/30 dark:border-blue-700/30 text-sm text-blue-700 dark:text-blue-300 backdrop-blur-sm"></div>
                    </div>
                </div>
            </div>

            <!-- Enhanced Chain View -->
            <div class="lg:col-span-3 space-y-6">
                <div class="bg-white/60 dark:bg-gray-800/60 backdrop-blur-xl shadow-2xl rounded-2xl border border-white/20 dark:border-gray-700/30 overflow-hidden">
                    <div class="bg-gradient-to-r from-purple-500/10 to-pink-500/10 dark:from-purple-500/20 dark:to-pink-500/20 p-6 border-b border-gray-200/30 dark:border-gray-700/30">
                        <div class="flex items-center justify-between">
                            <div class="flex items-center space-x-3">
                                <div class="p-2 bg-purple-100 dark:bg-purple-900/30 rounded-lg">
                                    <svg class="w-5 h-5 text-purple-600 dark:text-purple-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1" />
                                    </svg>
                                </div>
                                <div>
                                    <h2 class="text-xl font-bold text-gray-900 dark:text-white">Chain Visualization</h2>
                                    <p class="text-sm text-gray-600 dark:text-gray-400">2 above • selected • 2 below</p>
                                </div>
                            </div>
                            <div class="text-sm text-gray-500 dark:text-gray-400 bg-gray-100/50 dark:bg-gray-700/50 px-3 py-2 rounded-lg backdrop-blur-sm">
                                Click a table row to explore
                            </div>
                        </div>
                    </div>

                    <div class="p-6">
                        <div id="chainView" class="flex gap-4 overflow-x-auto pb-4 min-h-[240px]">
                            <!-- Chain cards will be populated here -->
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Enhanced Table Card -->
        <div class="bg-white/60 dark:bg-gray-800/60 backdrop-blur-xl shadow-2xl rounded-2xl border border-white/20 dark:border-gray-700/30 overflow-hidden">
            <div class="bg-gradient-to-r from-green-500/10 to-teal-500/10 dark:from-green-500/20 dark:to-teal-500/20 px-6 py-5 border-b border-gray-200/30 dark:border-gray-700/30">
                <div class="flex items-center justify-between">
                    <div class="flex items-center space-x-3">
                        <div class="p-2 bg-green-100 dark:bg-green-900/30 rounded-lg">
                            <svg class="w-5 h-5 text-green-600 dark:text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 17V7m0 10a2 2 0 01-2 2H5a2 2 0 01-2-2V7a2 2 0 012-2h2a2 2 0 012 2m0 10a2 2 0 002 2h2a2 2 0 002-2M9 7a2 2 0 012-2h2a2 2 0 012 2m0 10V7m0 10a2 2 0 002 2h2a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2h2a2 2 0 002-2z" />
                            </svg>
                        </div>
                        <div>
                            <h3 class="text-xl font-bold text-gray-900 dark:text-white">Blockchain Events</h3>
                            <p class="text-sm text-gray-600 dark:text-gray-400">Complete transaction history</p>
                        </div>
                    </div>

                    <div class="flex items-center space-x-4">
                        <div class="text-sm font-medium text-gray-600 dark:text-gray-300 bg-gray-100/50 dark:bg-gray-700/50 px-4 py-2 rounded-lg backdrop-blur-sm">
                            Showing <span id="shownCount" class="font-bold text-gray-900 dark:text-white">0</span> of
                            <span id="totalCount" class="font-bold text-gray-900 dark:text-white">0</span> events
                        </div>
                    </div>
                </div>
            </div>

            <!-- Enhanced responsive table -->
            <div class="overflow-x-auto">
                <table class="w-full text-sm text-left min-w-[1200px]">
                    <thead class="bg-gray-50/80 dark:bg-gray-700/80 backdrop-blur-sm">
                        <tr>
                            <th class="px-6 py-4 font-semibold text-gray-700 dark:text-gray-200 uppercase tracking-wider border-b border-gray-200/50 dark:border-gray-600/50">ID</th>
                            <th class="px-6 py-4 font-semibold text-gray-700 dark:text-gray-200 uppercase tracking-wider border-b border-gray-200/50 dark:border-gray-600/50">Card ID</th>
                            <th class="px-6 py-4 font-semibold text-gray-700 dark:text-gray-200 uppercase tracking-wider border-b border-gray-200/50 dark:border-gray-600/50">Event Type</th>
                            <th class="px-6 py-4 font-semibold text-gray-700 dark:text-gray-200 uppercase tracking-wider border-b border-gray-200/50 dark:border-gray-600/50">Station</th>
                            <th class="px-6 py-4 font-semibold text-gray-700 dark:text-gray-200 uppercase tracking-wider border-b border-gray-200/50 dark:border-gray-600/50">Timestamp</th>
                            <th class="px-6 py-4 font-semibold text-gray-700 dark:text-gray-200 uppercase tracking-wider border-b border-gray-200/50 dark:border-gray-600/50">Amount</th>
                            <th class="px-6 py-4 font-semibold text-gray-700 dark:text-gray-200 uppercase tracking-wider border-b border-gray-200/50 dark:border-gray-600/50">Hash</th>
                            <th class="px-6 py-4 font-semibold text-gray-700 dark:text-gray-200 uppercase tracking-wider border-b border-gray-200/50 dark:border-gray-600/50">Previous Hash</th>
                        </tr>
                    </thead>
                    <tbody id="blockchainTableBody" class="bg-white/40 dark:bg-gray-800/40 divide-y divide-gray-200/50 dark:divide-gray-700/50 backdrop-blur-sm">
                        <!-- rows injected by JS -->
                    </tbody>
                </table>
            </div>

            <!-- Enhanced Pagination -->
            <div class="bg-gray-50/80 dark:bg-gray-700/80 backdrop-blur-sm px-6 py-4 border-t border-gray-200/50 dark:border-gray-700/50">
                <div class="flex items-center justify-between">
                    <div class="flex items-center space-x-4">
                        <button id="prevPage"
                                class="inline-flex items-center px-4 py-2 bg-white/80 dark:bg-gray-800/80 text-gray-700 dark:text-gray-200 font-medium rounded-lg border border-gray-300/50 dark:border-gray-600/50 hover:bg-gray-50 dark:hover:bg-gray-700 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200 backdrop-blur-sm">
                            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
                            </svg>
                            Previous
                        </button>
                        <button id="nextPage"
                                class="inline-flex items-center px-4 py-2 bg-white/80 dark:bg-gray-800/80 text-gray-700 dark:text-gray-200 font-medium rounded-lg border border-gray-300/50 dark:border-gray-600/50 hover:bg-gray-50 dark:hover:bg-gray-700 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200 backdrop-blur-sm">
                            Next
                            <svg class="w-4 h-4 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                            </svg>
                        </button>
                        <span class="text-sm font-medium text-gray-700 dark:text-gray-300 bg-white/50 dark:bg-gray-800/50 px-3 py-2 rounded-lg backdrop-blur-sm">
                            Page <span id="pageInfo" class="font-bold text-gray-900 dark:text-white">1</span>
                        </span>
                    </div>

                    <div class="flex items-center space-x-4">
                        <label class="text-sm font-medium text-gray-700 dark:text-gray-300">Rows per page:</label>
                        <select id="pageSizeSelect"
                                class="px-3 py-2 bg-white/80 dark:bg-gray-800/80 border border-gray-300/50 dark:border-gray-600/50 rounded-lg text-sm text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500/30 focus:border-blue-500 transition-all duration-200 backdrop-blur-sm">
                            <option>10</option>
                            <option>20</option>
                            <option>50</option>
                        </select>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Enhanced Message Modal -->
<div id="overlay" class="fixed inset-0 bg-black/60 backdrop-blur-sm flex items-center justify-center hidden z-50 transition-all duration-300">
    <div id="overlayPanel" class="bg-white/95 dark:bg-gray-800/95 backdrop-blur-xl p-8 rounded-2xl shadow-2xl w-full max-w-md mx-4 transform transition-all scale-95 opacity-0 border border-white/20 dark:border-gray-700/30">
        <div class="text-center space-y-4">
            <div id="overlayIcon" class="mx-auto w-12 h-12 flex items-center justify-center rounded-full">
                <!-- Icon will be set dynamically -->
            </div>
            <p id="overlayMessage" class="text-gray-900 dark:text-white text-lg font-medium leading-relaxed"></p>
            <div class="pt-4">
                <button onclick="closeOverlay()"
                        class="bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white font-semibold px-6 py-3 rounded-xl transition-all duration-200 transform hover:scale-105 focus:ring-4 focus:ring-blue-500/30">
                    Got it
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Enhanced Issues Modal -->
<div id="issuesOverlay" class="fixed inset-0 bg-black/60 backdrop-blur-sm flex items-center justify-center hidden z-50">
    <div class="bg-white/95 dark:bg-gray-800/95 backdrop-blur-xl rounded-2xl shadow-2xl w-full max-w-6xl max-h-[85vh] mx-4 overflow-hidden border border-white/20 dark:border-gray-700/30">
        <div class="bg-gradient-to-r from-red-500/10 to-orange-500/10 dark:from-red-500/20 dark:to-orange-500/20 px-6 py-5 border-b border-gray-200/30 dark:border-gray-700/30">
            <div class="flex items-center justify-between">
                <div class="flex items-center space-x-4">
                    <div class="p-3 bg-red-100 dark:bg-red-900/30 rounded-xl">
                        <svg class="w-6 h-6 text-red-600 dark:text-red-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>
                    </div>
                    <div>
                        <h2 class="text-2xl font-bold text-gray-900 dark:text-white">Validation Issues</h2>
                        <p class="text-sm text-gray-600 dark:text-gray-400">Click a row to jump to that event • Use Fix to attempt server-side repair</p>
                    </div>
                </div>
                <button onclick="toggleIssuesOverlay(false)"
                        class="p-2 text-gray-400 hover:text-gray-600 dark:hover:text-gray-200 transition-colors rounded-lg hover:bg-gray-100/50 dark:hover:bg-gray-700/50">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                    </svg>
                </button>
            </div>
        </div>

        <div class="overflow-auto max-h-[calc(85vh-120px)]">
            <table class="w-full">
                <thead class="bg-gray-50/80 dark:bg-gray-700/80 backdrop-blur-sm sticky top-0">
                    <tr>
                        <th class="px-6 py-4 text-left text-xs font-semibold text-gray-700 dark:text-gray-200 uppercase tracking-wider">Card ID</th>
                        <th class="px-6 py-4 text-left text-xs font-semibold text-gray-700 dark:text-gray-200 uppercase tracking-wider">Event ID</th>
                        <th class="px-6 py-4 text-left text-xs font-semibold text-gray-700 dark:text-gray-200 uppercase tracking-wider">Issue</th>
                        <th class="px-6 py-4 text-left text-xs font-semibold text-gray-700 dark:text-gray-200 uppercase tracking-wider">Suggested Fix</th>
                        <th class="px-6 py-4 text-left text-xs font-semibold text-gray-700 dark:text-gray-200 uppercase tracking-wider">Actions</th>
                    </tr>
                </thead>
                <tbody id="issuesTableBody" class="bg-white/40 dark:bg-gray-800/40 divide-y divide-gray-200/50 dark:divide-gray-700/50 backdrop-blur-sm">
                    <!-- injected -->
                </tbody>
            </table>
        </div>
    </div>
</div>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <script>
        const apiBase = "/blockchain";
        let pageSize = parseInt(document.getElementById('pageSizeSelect').value, 10);
        let currentPage = 1;
        let allData = @Html.Raw(Json.Serialize(Model));
        let filteredData = [...allData];
        let issueIds = new Set();
        let selectedId = null;
        let lastValidationIssues = [];

        // Chart variables
        let timeChart = null;
        let chartData = [];

        // DOM refs
        const tableBody = document.getElementById("blockchainTableBody");
        const shownCountEl = document.getElementById("shownCount");
        const totalCountEl = document.getElementById("totalCount");
        const pageInfo = document.getElementById("pageInfo");
        const fixAllBtn = document.getElementById("fixAllBtn");
        const overlay = document.getElementById("overlay");
        const overlayMessage = document.getElementById("overlayMessage");
        const overlayPanel = document.getElementById("overlayPanel");
        const overlayIcon = document.getElementById("overlayIcon");
        const chainView = document.getElementById("chainView");
        const searchText = document.getElementById("searchText");
        const fromDate = document.getElementById("fromDate");
        const toDate = document.getElementById("toDate");
        const filterSummary = document.getElementById("filterSummary");
        const toggleIssuesBtn = document.getElementById('toggleIssuesBtn');
        const issuesOverlay = document.getElementById('issuesOverlay');
        const issuesTableBody = document.getElementById('issuesTableBody');

        // Chart DOM refs
        const timeChartCanvas = document.getElementById('timeChart');
        const chartTimeframe = document.getElementById('chartTimeframe');
        const chartLoading = document.getElementById('chartLoading');
        const totalTransactionsEl = document.getElementById('totalTransactions');
        const avgPerHourEl = document.getElementById('avgPerHour');
        const peakHourEl = document.getElementById('peakHour');
        const lastHourEl = document.getElementById('lastHour');

        // Theme Toggle
        const themeToggle = document.getElementById('themeToggle');
        const html = document.documentElement;

        // ------------------ Chart Functions ------------------
        function initChart() {
            const ctx = timeChartCanvas.getContext('2d');

            timeChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: [],
                    datasets: [{
                        label: 'Transaction Count',
                        data: [],
                        borderColor: 'rgb(6, 182, 212)',
                        backgroundColor: 'rgba(6, 182, 212, 0.1)',
                        borderWidth: 3,
                        fill: true,
                        tension: 0.4,
                        pointBackgroundColor: 'rgb(6, 182, 212)',
                        pointBorderColor: '#ffffff',
                        pointBorderWidth: 2,
                        pointRadius: 6,
                        pointHoverRadius: 8,
                        pointHoverBackgroundColor: 'rgb(6, 182, 212)',
                        pointHoverBorderColor: '#ffffff',
                        pointHoverBorderWidth: 3
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        },
                        tooltip: {
                            backgroundColor: 'rgba(0, 0, 0, 0.8)',
                            titleColor: 'white',
                            bodyColor: 'white',
                            cornerRadius: 8,
                            displayColors: false,
                            callbacks: {
                                title: function(context) {
                                    return context[0].label;
                                },
                                label: function(context) {
                                    return `${context.parsed.y} transactions`;
                                }
                            }
                        }
                    },
                    scales: {
                        x: {
                            grid: {
                                color: 'rgba(156, 163, 175, 0.2)',
                                drawBorder: false
                            },
                            ticks: {
                                color: 'rgb(107, 114, 128)',
                                font: {
                                    size: 12
                                }
                            }
                        },
                        y: {
                            beginAtZero: true,
                            grid: {
                                color: 'rgba(156, 163, 175, 0.2)',
                                drawBorder: false
                            },
                            ticks: {
                                color: 'rgb(107, 114, 128)',
                                font: {
                                    size: 12
                                },
                                callback: function(value) {
                                    return Math.floor(value);
                                }
                            }
                        }
                    },
                    interaction: {
                        intersect: false,
                        mode: 'index'
                    },
                    elements: {
                        point: {
                            hoverRadius: 8
                        }
                    }
                }
            });
        }

        function updateChart(timeframe = 'hour') {
            chartLoading.classList.remove('hidden');

            setTimeout(() => {
                const now = new Date();
                let startTime, groupBy, labelFormat;

                switch(timeframe) {
                    case 'hour':
                        startTime = new Date(now.getTime() - 24 * 60 * 60 * 1000); // Last 24 hours
                        groupBy = 'hour';
                        labelFormat = (date) => date.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' });
                        break;
                    case 'day':
                        startTime = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000); // Last 7 days
                        groupBy = 'day';
                        labelFormat = (date) => date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });
                        break;
                    case 'week':
                        startTime = new Date(now.getTime() - 28 * 24 * 60 * 60 * 1000); // Last 4 weeks
                        groupBy = 'week';
                        labelFormat = (date) => `Week ${Math.ceil((date.getDate()) / 7)}`;
                        break;
                }

                // Filter data within timeframe
                const relevantData = allData.filter(event => {
                    const eventTime = new Date(event.timestamp);
                    return eventTime >= startTime && eventTime <= now;
                });

                // Group data by time periods
                const grouped = {};
                const labels = [];
                const counts = [];

                // Create time buckets
                let current = new Date(startTime);
                while (current <= now) {
                    let key;
                    if (groupBy === 'hour') {
                        key = `${current.getFullYear()}-${current.getMonth()}-${current.getDate()}-${current.getHours()}`;
                        labels.push(labelFormat(current));
                        current.setHours(current.getHours() + 1);
                    } else if (groupBy === 'day') {
                        key = `${current.getFullYear()}-${current.getMonth()}-${current.getDate()}`;
                        labels.push(labelFormat(current));
                        current.setDate(current.getDate() + 1);
                    } else { // week
                        key = `${current.getFullYear()}-${Math.ceil((current.getDate()) / 7)}`;
                        labels.push(labelFormat(current));
                        current.setDate(current.getDate() + 7);
                    }
                    grouped[key] = 0;
                }

                // Count events in each bucket
                relevantData.forEach(event => {
                    const eventTime = new Date(event.timestamp);
                    let key;
                    if (groupBy === 'hour') {
                        key = `${eventTime.getFullYear()}-${eventTime.getMonth()}-${eventTime.getDate()}-${eventTime.getHours()}`;
                    } else if (groupBy === 'day') {
                        key = `${eventTime.getFullYear()}-${eventTime.getMonth()}-${eventTime.getDate()}`;
                    } else { // week
                        key = `${eventTime.getFullYear()}-${Math.ceil((eventTime.getDate()) / 7)}`;
                    }
                    if (grouped[key] !== undefined) {
                        grouped[key]++;
                    }
                });

                // Convert to arrays
                Object.keys(grouped).forEach(key => {
                    counts.push(grouped[key]);
                });

                // Update chart
                timeChart.data.labels = labels;
                timeChart.data.datasets[0].data = counts;
                timeChart.update('active');

                // Update statistics
                updateChartStatistics(relevantData, counts, timeframe);

                chartLoading.classList.add('hidden');
            }, 300);
        }

        function updateChartStatistics(data, counts, timeframe) {
            const total = data.length;
            const nonZeroCounts = counts.filter(c => c > 0);
            const average = nonZeroCounts.length > 0 ? Math.round(nonZeroCounts.reduce((a, b) => a + b, 0) / nonZeroCounts.length) : 0;
            const peak = Math.max(...counts);
            const latest = counts[counts.length - 1] || 0;

            totalTransactionsEl.textContent = total.toLocaleString();
            avgPerHourEl.textContent = average.toLocaleString();
            peakHourEl.textContent = peak.toLocaleString();
            lastHourEl.textContent = latest.toLocaleString();
        }

        // ------------------ Helpers (UNCHANGED) ------------------
        function fmt(dt) {
            if (!dt) return "N/A";
            const d = new Date(dt);
            if (isNaN(d)) return dt;
            return d.toLocaleString();
        }

        function escapeHtml(unsafe) {
            if (unsafe == null) return '';
            return String(unsafe).replace(/[&<>"']/g, function (m) {
                return ({ '&': '&amp;', '<': '&lt;', '>': '&gt;', '"': '&quot;', "'": '&#39;' })[m];
            });
        }

        function formatHash(hash) {
            if (!hash) return 'N/A';
            const h = escapeHtml(hash);
            const visible = h.length > 20 ? `${h.slice(0, 8)}...${h.slice(-8)}` : h;
            return `<span class="inline-block max-w-[18rem] truncate font-mono text-xs bg-gray-100 dark:bg-gray-700 px-2 py-1 rounded-md" title="${h}">${visible}</span>`;
        }

        function renderChainView(selectedEventId) {
            chainView.innerHTML = "";
            if (!selectedEventId) {
                for (let i = 0; i < 5; i++) chainView.appendChild(createEmptyCard());
                return;
            }

            const selectedBlock = allData.find(e => String(e.id) === String(selectedEventId));
            if (!selectedBlock) {
                for (let i = 0; i < 5; i++) chainView.appendChild(createEmptyCard());
                return;
            }

            // Only blocks with the same cardId, sorted by timestamp ascending
            const sameCardBlocks = allData
                .filter(e => e.cardId === selectedBlock.cardId)
                .sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp));

            const idx = sameCardBlocks.findIndex(e => String(e.id) === String(selectedEventId));
            const indices = [-2, -1, 0, 1, 2].map(off => idx + off);

            indices.forEach(i => {
                if (i >= 0 && i < sameCardBlocks.length) {
                    chainView.appendChild(createBlockCard(sameCardBlocks[i], i === idx));
                } else {
                    chainView.appendChild(createEmptyCard());
                }
            });
        }

        function createEmptyCard() {
            const c = document.createElement("div");
            c.className = "flex-shrink-0 w-72 p-6 border-2 border-dashed border-gray-300/50 dark:border-gray-600/50 rounded-2xl bg-gray-50/30 dark:bg-gray-800/30 text-gray-400 dark:text-gray-500 backdrop-blur-sm";
            c.innerHTML = `
                <div class="h-32 flex flex-col items-center justify-center space-y-2">
                    <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 12H4"/>
                    </svg>
                    <span class="text-sm font-medium">No Block</span>
                </div>
            `;
            return c;
        }

        function createBlockCard(block, isCenter) {
            const wrapper = document.createElement("div");
            const hasIssue = issueIds.has(String(block.id));

            wrapper.className = `flex-shrink-0 w-80 p-6 rounded-2xl border transition-all duration-300 transform hover:scale-105 backdrop-blur-sm ${
                isCenter
                    ? `border-2 ${hasIssue ? 'border-red-400 dark:border-red-500 bg-red-50/50 dark:bg-red-900/20' : 'border-blue-400 dark:border-blue-500 bg-blue-50/50 dark:bg-blue-900/20'} shadow-xl`
                    : `border border-gray-200/50 dark:border-gray-700/50 ${hasIssue ? 'bg-red-50/30 dark:bg-red-900/10' : 'bg-white/40 dark:bg-gray-800/40'} shadow-lg hover:shadow-xl`
            }`;

            const statusIndicator = hasIssue
                ? `<div class="absolute -top-2 -right-2 w-6 h-6 bg-red-500 rounded-full flex items-center justify-center shadow-lg animate-pulse">
                     <svg class="w-3 h-3 text-white" fill="currentColor" viewBox="0 0 20 20">
                       <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clip-rule="evenodd"/>
                     </svg>
                   </div>`
                : isCenter
                ? `<div class="absolute -top-2 -right-2 w-6 h-6 bg-blue-500 rounded-full flex items-center justify-center shadow-lg">
                     <svg class="w-3 h-3 text-white" fill="currentColor" viewBox="0 0 20 20">
                       <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/>
                     </svg>
                   </div>`
                : '';

            const html = `
                    <div class="relative w-full max-w-md mx-auto bg-white dark:bg-gray-900 rounded-2xl shadow-sm border border-gray-100 dark:border-gray-800 overflow-hidden">
          <!-- Header with Status and Event Type -->
          <div class="flex items-center justify-between p-6 pb-4 border-b border-gray-100 dark:border-gray-800">
            <div class="flex items-center gap-3">
              ${statusIndicator}
              <div>
                <h3 class="text-sm font-semibold text-gray-900 dark:text-gray-100">Transaction Block</h3>
                <p class="text-xs text-gray-500 dark:text-gray-400">${block.timestamp}</p>
              </div>
            </div>
            <span class="inline-flex items-center px-3 py-1.5 rounded-full text-xs font-medium ${
              block.eventType === 'TAP_IN'
                ? 'bg-emerald-50 text-emerald-700 ring-1 ring-emerald-600/20 dark:bg-emerald-500/10 dark:text-emerald-400 dark:ring-emerald-500/30'
                : block.eventType === 'TAP_OUT'
                ? 'bg-rose-50 text-rose-700 ring-1 ring-rose-600/20 dark:bg-rose-500/10 dark:text-rose-400 dark:ring-rose-500/30'
                : 'bg-gray-50 text-gray-700 ring-1 ring-gray-600/20 dark:bg-gray-500/10 dark:text-gray-400 dark:ring-gray-500/30'
            }">
              ${block.eventType}
            </span>
          </div>

          <!-- Main Content -->
          <div class="p-6 space-y-4">
            <!-- Amount - Most Important -->
            <div class="flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-800/50 rounded-xl">
              <span class="text-sm font-medium text-gray-600 dark:text-gray-400">Amount</span>
              <div class="text-right">
                <div class="text-lg font-bold ${
                  (block.eventType == 'TapOut') ? 'text-rose-600 dark:text-rose-400' : ((block.eventType == 'TapIn') ? 'text-gray-400 dark:text-gray-300' : 'text-emerald-600 dark:text-emerald-400')}
                ">${(block.eventType == 'TapOut') ? '-' : ((block.eventType == 'TapIn') ? '' : '+')}${block.amount}</div>
              </div>
            </div>

            <!-- Station and Card Info -->
            <div class="grid grid-cols-1 gap-3">
              <div class="flex items-center justify-between py-2">
                <span class="text-sm font-medium text-gray-600 dark:text-gray-400">Station</span>
                <span class="text-sm text-gray-900 dark:text-gray-100 font-medium">${escapeHtml(block.station) || 'Unknown Station'}</span>
              </div>

              <div class="pt-2 border-t border-gray-100 dark:border-gray-800">
                <span class="text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wide">Card ID</span>
                <div class="mt-1 flex items-center justify-between">
                  <code class="text-xs font-mono text-gray-600 dark:text-gray-300 bg-gray-100 dark:bg-gray-800 px-2 py-1 rounded truncate max-w-[200px]" title="${block.cardId}">
                    ${block.cardId}
                  </code>
                  <button class="ml-2 p-1.5 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 transition-colors" onclick="navigator.clipboard.writeText('${block.cardId}')" title="Copy Card ID">
                    <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
                    </svg>
                  </button>
                </div>
              </div>
            </div>
          </div>

          <!-- Collapsible Technical Details -->
          <div class="border-t border-gray-100 dark:border-gray-800">
            <button class="w-full px-6 py-3 text-left flex items-center justify-between text-sm font-medium text-gray-600 dark:text-gray-400 hover:bg-gray-50 dark:hover:bg-gray-800/50 transition-colors" onclick="toggleDetails(this)">
              <span>Technical Details</span>
              <svg class="w-4 h-4 transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
              </svg>
            </button>
            <div class="hidden px-6 pb-6 space-y-3" data-details>
              <!-- Block ID -->
              <div>
                <span class="text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wide">Block ID</span>
                <div class="mt-1 flex items-center justify-between">
                  <code class="text-xs font-mono text-gray-600 dark:text-gray-300 bg-gray-100 dark:bg-gray-800 px-2 py-1 rounded truncate max-w-[200px]" title="${block.id}">
                    ${block.id}
                  </code>
                  <button class="ml-2 p-1.5 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 transition-colors" onclick="navigator.clipboard.writeText('${block.id}')" title="Copy Block ID">
                    <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
                    </svg>
                  </button>
                </div>
              </div>

              <!-- Hash -->
              <div>
                <span class="text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wide">Hash</span>
                <div class="mt-1 flex items-center justify-between">
                  <code class="text-xs font-mono text-gray-600 dark:text-gray-300 bg-gray-100 dark:bg-gray-800 px-2 py-1 rounded truncate max-w-[200px]" title="${block.hash}">
                    ${block.hash}
                  </code>
                  <button class="ml-2 p-1.5 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 transition-colors" onclick="navigator.clipboard.writeText('${block.hash}')" title="Copy Hash">
                    <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
                    </svg>
                  </button>
                </div>
              </div>

              <!-- Previous Hash -->
              <div>
                <span class="text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wide">Previous Hash</span>
                <div class="mt-1 flex items-center justify-between">
                  <code class="text-xs font-mono text-gray-600 dark:text-gray-300 bg-gray-100 dark:bg-gray-800 px-2 py-1 rounded truncate max-w-[200px]" title="${block.previoushash || 'GENESIS'}">
                    ${block.previoushash || 'GENESIS'}
                  </code>
                  <button class="ml-2 p-1.5 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 transition-colors" onclick="navigator.clipboard.writeText('${block.previoushash || 'GENESIS'}')" title="Copy Previous Hash">
                    <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
                    </svg>
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>

            `;

            wrapper.innerHTML = html;
            return wrapper;
        }

        function toggleDetails(button) {
          const details = button.nextElementSibling;
          const icon = button.querySelector('svg');

          if (details.classList.contains('hidden')) {
            details.classList.remove('hidden');
            icon.style.transform = 'rotate(180deg)';
          } else {
            details.classList.add('hidden');
            icon.style.transform = 'rotate(0deg)';
          }
        }

        // ------------------ Enhanced Table Rendering ------------------
        function renderTable(page = 1) {
            const total = filteredData.length;
            pageSize = parseInt(document.getElementById('pageSizeSelect').value, 10);
            const totalPages = Math.max(1, Math.ceil(total / pageSize));
            if (page < 1) page = 1;
            if (page > totalPages) page = totalPages;
            currentPage = page;

            const start = (page - 1) * pageSize;
            const end = start + pageSize;
            const slice = filteredData.slice(start, end);

            tableBody.innerHTML = "";

            slice.forEach(ev => {
                const tr = document.createElement("tr");
                const hasIssue = issueIds.has(String(ev.id));
                const isSelected = String(ev.id) === String(selectedId);

                tr.className = `transition-all duration-200 cursor-pointer ${
                    hasIssue
                        ? 'bg-red-50/80 dark:bg-red-900/20 hover:bg-red-100/80 dark:hover:bg-red-900/30 border-l-4 border-red-400'
                        : isSelected
                        ? 'bg-blue-50/80 dark:bg-blue-900/20 hover:bg-blue-100/80 dark:hover:bg-blue-900/30 border-l-4 border-blue-400'
                        : 'hover:bg-gray-50/80 dark:hover:bg-gray-700/50'
                }`;

                const statusCell = hasIssue
                    ? `<div class="flex items-center space-x-2">
                         <div class="w-2 h-2 bg-red-500 rounded-full animate-pulse"></div>
                         <span class="font-bold">${escapeHtml(ev.id)}</span>
                       </div>`
                    : `<span class="font-medium">${escapeHtml(ev.id)}</span>`;

                const amountClass = ev.eventType === 'TapIn' ? 'text-green-600 dark:text-green-400' :
                                     ev.eventType === 'TapOut' ? 'text-red-600 dark:text-red-400' :
                                     'text-gray-600 dark:text-gray-400';

            const date = new Date(ev.timestamp);

        const humanReadable = date.toLocaleString('en-US', {
            year: 'numeric',
            month: 'long',
            day: 'numeric',
            hour: 'numeric',
            minute: 'numeric',
            second: 'numeric',
            timeZoneName: 'short'
        });

                tr.innerHTML = `
                           <td class="px-4 py-3 text-gray-900 dark:text-gray-100">
            <div class="max-w-[120px] truncate font-mono text-sm" title="${statusCell}">
                ${statusCell}
            </div>
        </td>
        <td class="px-4 py-3">
            <div class="max-w-[100px] truncate font-mono text-xs text-gray-600 dark:text-gray-400 bg-gray-50 dark:bg-gray-800 rounded px-2 py-1" title="${ev.cardId}">
                ${ev.cardId}
            </div>
        </td>
        <td class="px-4 py-3">
            <span class="inline-flex items-center px-2 py-1 text-xs font-medium text-gray-900 dark:text-gray-100">
                ${ev.eventType}
            </span>
        </td>
        <td class="px-4 py-3 text-gray-900 dark:text-gray-100">
            <div class="max-w-[120px] truncate" title="${ev.station || 'N/A'}">
                ${ev.station || 'N/A'}
            </div>
        </td>
        <td class="px-4 py-3 text-gray-700 dark:text-gray-300">
            <div class="max-w-[140px] truncate text-sm" title="${humanReadable}">
                ${humanReadable}
            </div>
        </td>
        <td class="px-4 py-3 ${amountClass}">
            <div class="font-semibold">
                ${ev.amount}
            </div>
        </td>
        <td class="px-4 py-3 text-gray-900 dark:text-gray-100">
            <div class="max-w-[100px] truncate font-mono text-xs text-gray-600 dark:text-gray-400 bg-gray-50 dark:bg-gray-800 rounded px-2 py-1" title="${ev.hash}">
                ${ev.hash}
            </div>
        </td>
        <td class="px-4 py-3 text-gray-900 dark:text-gray-100">
            <div class="max-w-[100px] truncate font-mono text-xs text-gray-600 dark:text-gray-400 bg-gray-50 dark:bg-gray-800 rounded px-2 py-1" title="${ev.previoushash || 'GENESIS'}">
                ${ev.previoushash || 'GENESIS'}
            </div>
        </td>
                `;

                tr.addEventListener('click', () => {
                    selectedId = ev.id;
                    renderChainView(selectedId);
                    renderTable(currentPage); // Re-render to show selection
                });

                tableBody.appendChild(tr);
            });

            shownCountEl.textContent = slice.length;
            totalCountEl.textContent = total;
            pageInfo.textContent = `${currentPage} / ${totalPages}`;

            // Update pagination buttons
            document.getElementById('prevPage').disabled = currentPage <= 1;
            document.getElementById('nextPage').disabled = currentPage >= totalPages;
        }

        function applyFilters() {
            const q = (searchText.value || '').trim().toLowerCase();
            const from = fromDate.value ? new Date(fromDate.value) : null;
            const to = toDate.value ? new Date(toDate.value) : null;

            filteredData = allData.filter(ev => {
                let ok = true;

                if (q) {
                    const composite = `${ev.cardId || ''} ${ev.id || ''} ${ev.eventType || ''} ${ev.station || ''}`.toLowerCase();
                    ok = composite.includes(q);
                }
                if (ok && from) {
                    const t = new Date(ev.timestamp);
                    if (isNaN(t) || t < from) ok = false;
                }
                if (ok && to) {
                    const t = new Date(ev.timestamp);
                    if (isNaN(t) || t > to) ok = false;
                }
                return ok;
            });

            // update summary
            let summary = [];
            if (q) summary.push(`Search: "${q}"`);
            if (from) summary.push(`From: ${from.toLocaleDateString()}`);
            if (to) summary.push(`To: ${to.toLocaleDateString()}`);
            filterSummary.innerHTML = summary.length ?
                `<div class="flex items-center space-x-2">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.207A1 1 0 013 6.5V4z"/>
                    </svg>
                    <span class="font-medium">Active Filters:</span>
                </div>
                <div class="text-xs mt-1">${summary.join(' • ')}</div>` :
                '<div class="text-center text-gray-400">No active filters</div>';

            currentPage = 1;
            renderTable(currentPage);

            if (!filteredData.some(e => String(e.id) === String(selectedId))) {
                selectedId = null;
                renderChainView(null);
            }
        }

        function clearFilters() {
            searchText.value = '';
            fromDate.value = '';
            toDate.value = '';
            filteredData = [...allData];
            filterSummary.innerHTML = '<div class="text-center text-gray-400">No active filters</div>';
            currentPage = 1;
            renderTable(currentPage);
            selectedId = null;
            renderChainView(null);
        }

        function showOverlay(msg, type = 'info') {
            overlayMessage.innerHTML = msg;

            // Set icon based on type
            const iconConfigs = {
                success: { bg: 'bg-green-100 dark:bg-green-900/30', icon: `<svg class="w-6 h-6 text-green-600 dark:text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/></svg>` },
                error: { bg: 'bg-red-100 dark:bg-red-900/30', icon: `<svg class="w-6 h-6 text-red-600 dark:text-red-400" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/></svg>` },
                warning: { bg: 'bg-amber-100 dark:bg-amber-900/30', icon: `<svg class="w-6 h-6 text-amber-600 dark:text-amber-400" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16c-.77.833.192 2.5 1.732 2.5z"/></svg>` },
                info: { bg: 'bg-blue-100 dark:bg-blue-900/30', icon: `<svg class="w-6 h-6 text-blue-600 dark:text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/></svg>` }
            };

            const config = iconConfigs[type] || iconConfigs.info;
            overlayIcon.className = `mx-auto w-12 h-12 flex items-center justify-center rounded-full ${config.bg}`;
            overlayIcon.innerHTML = config.icon;

            overlay.classList.remove('hidden');
            overlay.classList.add('flex');

            setTimeout(() => {
                overlayPanel.classList.remove('scale-95', 'opacity-0');
                overlayPanel.classList.add('scale-100', 'opacity-100');
            }, 10);
        }

        function closeOverlay() {
            overlayPanel.classList.remove('scale-100', 'opacity-100');
            overlayPanel.classList.add('scale-95', 'opacity-0');
            setTimeout(() => {
                overlay.classList.add('hidden');
            }, 300);
        }

        function toggleIssuesOverlay(force) {
            if (typeof force === 'boolean') {
                if (force) {
                    issuesOverlay.classList.remove('hidden');
                } else {
                    issuesOverlay.classList.add('hidden');
                }
                return;
            }
            issuesOverlay.classList.toggle('hidden');
        }

        function populateIssuesTable(data) {
            lastValidationIssues = Array.isArray(data) ? data : [];
            issuesTableBody.innerHTML = '';

            lastValidationIssues.forEach(i => {
                const tr = document.createElement('tr');
                tr.className = 'hover:bg-gray-100/80 dark:hover:bg-gray-700/50 cursor-pointer transition-colors';

                tr.innerHTML = `
                    <td class="px-6 py-4 break-words max-w-[12rem]">
                        <span class="font-mono text-sm bg-gray-100 dark:bg-gray-700 px-2 py-1 rounded">${escapeHtml(i.cardId)}</span>
                    </td>
                    <td class="px-6 py-4 break-words max-w-[12rem]">
                        <span class="font-bold text-gray-900">${escapeHtml(i.eventId)}</span>
                    </td>
                    <td class="px-6 py-4">
                        <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-300">
                            ${escapeHtml(i.issue)}
                        </span>
                    </td>
                    <td class="px-6 py-4 text-sm text-gray-600 dark:text-gray-300">${escapeHtml(i.fix)}</td>
                    <td class="px-6 py-4">
                        <button class="fix-row-btn inline-flex items-center px-3 py-2 bg-green-600 hover:bg-green-700 text-white font-medium rounded-lg text-xs transition-colors">
                            <svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"/>
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"/>
                            </svg>
                            Fix
                        </button>
                    </td>
                `;

                // click row -> jump
                tr.addEventListener('click', () => {
                    jumpToEvent(i.eventId);
                });

                // fix button
                const fixBtn = tr.querySelector('.fix-row-btn');
                fixBtn.addEventListener('click', (ev) => {
                    ev.stopPropagation();
                    fixEvent(i.eventId);
                });

                issuesTableBody.appendChild(tr);
            });
        }

        async function validateBlockchain() {
            try {
                const res = await fetch(`${apiBase}/validate`);
                if (!res.ok) throw new Error('Validation request failed');
                const data = await res.json();

                issueIds.clear();
                lastValidationIssues = Array.isArray(data) ? data : [];

                if (!Array.isArray(data) || data.length === 0) {
                    showOverlay("✅ Blockchain is valid — no issues found.", 'success');
                    fixAllBtn.classList.add('hidden');
                    toggleIssuesBtn.classList.add('hidden');
                    populateIssuesTable([]);
                } else {
                    showOverlay(`❌ Found ${data.length} validation issue${data.length === 1 ? '' : 's'}. Affected rows are highlighted in red.`, 'error');
                    data.forEach(issue => issueIds.add(String(issue.eventId)));
                    fixAllBtn.classList.remove('hidden');
                    toggleIssuesBtn.classList.remove('hidden');
                    populateIssuesTable(data);
                }

                renderTable(currentPage);
                renderChainView(selectedId); // Refresh chain view to show issue indicators
            } catch (err) {
                showOverlay("❌ Validation failed: " + (err.message || err), 'error');
            }
        }

        async function fixAllIssues() {
            try {
                const res = await fetch(`${apiBase}/fixall`, { method: "POST" });
                if (!res.ok) throw new Error('Fix all failed');
                showOverlay('🔧 All issues have been fixed successfully! Re-validating blockchain...', 'success');
                issueIds.clear();
                fixAllBtn.classList.add('hidden');
                toggleIssuesBtn.classList.add('hidden');
                await validateBlockchain();
            } catch (err) {
                showOverlay("❌ Fix all failed: " + (err.message || err), 'error');
            }
        }

        async function fixEvent(eventId) {
            try {
                const res = await fetch(`${apiBase}/fix/event/${encodeURIComponent(eventId)}`, { method: "POST" });
                if (!res.ok) throw new Error('Fix event failed');
                showOverlay(`🔧 Event ${eventId} has been fixed! Re-validating blockchain...`, 'success');
                issueIds.delete(String(eventId));
                await validateBlockchain();
            } catch (err) {
                showOverlay("❌ Fix event failed: " + (err.message || err), 'error');
            }
        }

        async function Tamper() {
            try {
                const res = await fetch(`${apiBase}/tamper`);
                if (!res.ok) throw new Error('Tamper failed');
                showOverlay("⚠️ Blockchain has been tampered with! Running validation to detect issues...", 'warning');
                await validateBlockchain();
            } catch (err) {
                showOverlay("❌ Tamper operation failed: " + (err.message || err), 'error');
            }
        }

        function jumpToEvent(eventId) {
            // Close overlay
            toggleIssuesOverlay(false);
            selectedId = eventId;

            // Try to find in filteredData first; if not present, clear filters and use allData
            let idx = filteredData.findIndex(ev => String(ev.id) === String(eventId));
            if (idx === -1) {
                filteredData = [...allData];
                searchText.value = '';
                fromDate.value = '';
                toDate.value = '';
                filterSummary.innerHTML = '<div class="text-center text-gray-400">No active filters</div>';
                idx = filteredData.findIndex(ev => String(ev.id) === String(eventId));
            }

            if (idx !== -1) {
                const page = Math.floor(idx / pageSize) + 1;
                renderTable(page);
                // small delay to ensure rows exist
                setTimeout(() => {
                    const rows = [...tableBody.querySelectorAll('tr')];
                    const targetRow = rows.find(r => r.children[0] && r.children[0].textContent.trim().includes(String(eventId)));
                    if (targetRow) {
                        targetRow.scrollIntoView({ behavior: 'smooth', block: 'center' });
                    }
                }, 100);
            }

            // Always update chain view
            renderChainView(selectedId);
        }

        // Event Listeners
        document.getElementById('applyFilter').addEventListener('click', applyFilters);
        document.getElementById('clearFilter').addEventListener('click', clearFilters);
        document.getElementById('prevPage').addEventListener('click', () => {
            if (currentPage > 1) {
                currentPage--;
                renderTable(currentPage);
            }
        });
        document.getElementById('nextPage').addEventListener('click', () => {
            const totalPages = Math.max(1, Math.ceil(filteredData.length / pageSize));
            if (currentPage < totalPages) {
                currentPage++;
                renderTable(currentPage);
            }
        });
        document.getElementById('pageSizeSelect').addEventListener('change', (e) => {
            pageSize = parseInt(e.target.value, 10);
            currentPage = 1;
            renderTable(currentPage);
        });
        toggleIssuesBtn.addEventListener('click', () => toggleIssuesOverlay());

        // Chart event listeners
        chartTimeframe.addEventListener('change', (e) => {
            updateChart(e.target.value);
        });

        // Add search on enter
        searchText.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                applyFilters();
            }
        });

        // Add smooth scrolling custom CSS
        const style = document.createElement('style');
        style.textContent = `
            .scrollbar-hide {
                -ms-overflow-style: none;
                scrollbar-width: none;
            }
            .scrollbar-hide::-webkit-scrollbar {
                display: none;
            }

            /* Enhanced animations */
        @@keyframes fadeIn {
                from { opacity: 0; transform: translateY(10px); }
                to { opacity: 1; transform: translateY(0); }
            }

            .animate-fade-in {
                animation: fadeIn 0.3s ease-out;
            }

            /* Custom gradient backgrounds */
            .bg-gradient-primary {
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            }

            .bg-gradient-success {
                background: linear-gradient(135deg, #11998e 0%, #38ef7d 100%);
            }

            .bg-gradient-warning {
                background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
            }

            .bg-gradient-danger {
                background: linear-gradient(135deg, #fc466b 0%, #3f5efb 100%);
            }
        `;
        document.head.appendChild(style);

        // ------------------ Initialize ------------------
        (function init() {
            filteredData = [...allData];
            document.getElementById('totalCount').textContent = allData.length;
            filterSummary.innerHTML = '<div class="text-center text-gray-400">No active filters</div>';
            renderTable(1);
            renderChainView(null); // empty five cards initially

            // Initialize chart
            initChart();
            updateChart('hour');

            // Add loading animation
            setTimeout(() => {
                document.body.classList.add('animate-fade-in');
            }, 100);
        })();
    </script>
