<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - My Application</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
        tailwind.config = {
            darkMode: 'class',
            theme: {
                extend: {
                    transitionProperty: {
                        'width': 'width',
                        'margin': 'margin-left, margin-right',
                    }
                }
            }
        }
    </script>
    <style>
        .sidebar-transition {
            transition: width 0.3s ease-in-out;
        }

        .content-transition {
            transition: margin-left 0.3s ease-in-out;
        }

        .rotate-180 {
            transform: rotate(180deg);
        }

        .hamburger-line {
            transition: all 0.3s ease-in-out;
        }

        .hamburger-active .hamburger-line:nth-child(1) {
            transform: rotate(45deg) translate(5px, 5px);
        }

        .hamburger-active .hamburger-line:nth-child(2) {
            opacity: 0;
        }

        .hamburger-active .hamburger-line:nth-child(3) {
            transform: rotate(-45deg) translate(7px, -6px);
        }
    </style>
</head>
<body class="bg-zinc-50 dark:bg-zinc-900 transition-colors duration-300">
    <!-- Top Navigation Bar -->
    <nav class="bg-white dark:bg-zinc-900 shadow-lg fixed top-0 left-0 right-0 z-50 transition-colors duration-300">
        <div class="px-4 h-16 flex items-center justify-between">
            <!-- Hamburger Menu Button -->
            <button id="sidebarToggle" class="p-2 rounded-lg hover:bg-pink-100 dark:hover:bg-pink-700/30 transition-colors duration-200">
                <div class="w-6 h-6 flex flex-col justify-center items-center">
                    <div class="hamburger-line w-6 h-0.5 bg-zinc-600 dark:bg-zinc-100 mb-1"></div>
                    <div class="hamburger-line w-6 h-0.5 bg-zinc-600 dark:bg-zinc-200 mb-1"></div>
                    <div class="hamburger-line w-6 h-0.5 bg-zinc-600 dark:bg-zinc-300"></div>
                </div>
            </button>

            <!-- Logo/Title -->
            <div class="flex-1 ml-4">
                <h1 class="text-xl font-semibold text-zinc-800 dark:text-white">My Application</h1>
            </div>

            <!-- Dark Mode Toggle -->
            <button id="darkModeToggle" class="p-2 rounded-lg hover:bg-zinc-100 dark:hover:bg-zinc-700 transition-colors duration-200">
                <svg id="sunIcon" class="w-6 h-6 text-zinc-600 dark:text-zinc-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"></path>
                </svg>
                <svg id="moonIcon" class="w-6 h-6 text-zinc-600 dark:text-zinc-300 hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z"></path>
                </svg>
            </button>
        </div>
    </nav>

    <!-- Sidebar -->
    <aside id="sidebar" class="sidebar-transition fixed left-0 top-16 h-[calc(100vh-4rem)] bg-white dark:bg-zinc-800 shadow-lg z-40 w-64 transform transition-transform duration-300 ease-in-out">
        <div class="p-4 h-full overflow-y-auto">
            <nav class="space-y-2">
                <!-- Navigation Items -->
                <a href="/" class="nav-item flex items-center p-3 rounded-lg hover:bg-rose-100 dark:hover:bg-pink-700 transition-colors duration-200 text-zinc-700 dark:text-zinc-200" data-page="Home">
                    <svg class="w-5 h-5 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6"></path>
                    </svg>
                    <span>Home</span>
                </a>

                <a href="/ReadBlockchain" class="nav-item flex items-center p-3 rounded-lg hover:bg-rose-100 dark:hover:bg-pink-700 transition-colors duration-200 text-zinc-700 dark:text-zinc-200" data-page="About">
                    <svg class="w-5 h-5 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                    </svg>
                    <span>Blockchain Ledger</span>
                </a>

                <a href="/stations" class="nav-item flex items-center p-3 rounded-lg hover:bg-pink-100 dark:hover:bg-pink-700 transition-colors duration-200 text-zinc-700 dark:text-zinc-200" data-page="Products">
                    <svg class="w-5 h-5 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4"></path>
                    </svg>
                    <span>Station</span>
                </a>

                <a href="/Services" class="nav-item flex items-center p-3 rounded-lg hover:bg-rose-100 dark:hover:bg-pink-700 transition-colors duration-200 text-zinc-700 dark:text-zinc-200" data-page="Services">
                    <svg class="w-5 h-5 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"></path>
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                    </svg>
                    <span>Services</span>
                </a>

                <a href="/Contact" class="nav-item flex items-center p-3 rounded-lg hover:bg-zinc-100 dark:hover:bg-pink-700 transition-colors duration-200 text-zinc-700 dark:text-zinc-200" data-page="Contact">
                    <svg class="w-5 h-5 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
                    </svg>
                    <span>Contact</span>
                </a>
            </nav>
        </div>
    </aside>

    <!-- Main Content Area -->
    <main id="mainContent" class="content-transition pt-16 ml-64 min-h-screen">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
            <div class="flex justify-center">
                <div class="w-full max-w-7xl">
                    @RenderBody()
                </div>
            </div>
        </div>
    </main>

    <!-- Overlay for mobile -->
    <div id="overlay" class="fixed inset-0 bg-black bg-opacity-50 z-30 hidden lg:hidden"></div>

    <script>
        class LayoutManager {
            constructor() {
                this.sidebar = document.getElementById('sidebar');
                this.mainContent = document.getElementById('mainContent');
                this.sidebarToggle = document.getElementById('sidebarToggle');
                this.overlay = document.getElementById('overlay');
                this.darkModeToggle = document.getElementById('darkModeToggle');
                this.sunIcon = document.getElementById('sunIcon');
                this.moonIcon = document.getElementById('moonIcon');

                this.isSidebarOpen = this.getStoredPreference('sidebarOpen', true);
                this.isDarkMode = this.getStoredPreference('darkMode', false);

                this.init();
            }

            init() {
                this.setupEventListeners();
                this.initializeDarkMode();
                this.initializeSidebar();
                this.highlightCurrentPage();
                this.handleResize();
            }

            setupEventListeners() {
                // Sidebar toggle
                this.sidebarToggle.addEventListener('click', () => this.toggleSidebar());

                // Dark mode toggle
                this.darkModeToggle.addEventListener('click', () => this.toggleDarkMode());

                // Overlay click (mobile)
                this.overlay.addEventListener('click', () => this.closeSidebar());

                // Window resize
                window.addEventListener('resize', () => this.handleResize());

                // Keyboard shortcuts
                document.addEventListener('keydown', (e) => {
                    if (e.ctrlKey && e.key === 'b') {
                        e.preventDefault();
                        this.toggleSidebar();
                    }
                    if (e.ctrlKey && e.key === 'd') {
                        e.preventDefault();
                        this.toggleDarkMode();
                    }
                });
            }

            toggleSidebar() {
                this.isSidebarOpen = !this.isSidebarOpen;
                this.updateSidebarState();
                this.storePreference('sidebarOpen', this.isSidebarOpen);
            }

            closeSidebar() {
                this.isSidebarOpen = false;
                this.updateSidebarState();
                this.storePreference('sidebarOpen', this.isSidebarOpen);
            }

            updateSidebarState() {
                const hamburger = this.sidebarToggle;

                if (window.innerWidth >= 1024) { // Desktop
                    if (this.isSidebarOpen) {
                        this.sidebar.style.transform = 'translateX(0)';
                        this.mainContent.style.marginLeft = '16rem';
                        hamburger.classList.remove('hamburger-active');
                    } else {
                        this.sidebar.style.transform = 'translateX(-100%)';
                        this.mainContent.style.marginLeft = '0';
                        hamburger.classList.add('hamburger-active');
                    }
                    this.overlay.classList.add('hidden');
                } else { // Mobile
                    if (this.isSidebarOpen) {
                        this.sidebar.style.transform = 'translateX(0)';
                        this.overlay.classList.remove('hidden');
                        hamburger.classList.remove('hamburger-active');
                    } else {
                        this.sidebar.style.transform = 'translateX(-100%)';
                        this.overlay.classList.add('hidden');
                        hamburger.classList.add('hamburger-active');
                    }
                    this.mainContent.style.marginLeft = '0';
                }
            }

            initializeSidebar() {
                this.updateSidebarState();
            }

            handleResize() {
                this.updateSidebarState();
            }

            toggleDarkMode() {
                this.isDarkMode = !this.isDarkMode;
                this.updateDarkModeState();
                this.storePreference('darkMode', this.isDarkMode);
            }

            initializeDarkMode() {
                this.updateDarkModeState();
            }

            updateDarkModeState() {
                if (this.isDarkMode) {
                    document.documentElement.classList.add('dark');
                    this.sunIcon.classList.add('hidden');
                    this.moonIcon.classList.remove('hidden');
                } else {
                    document.documentElement.classList.remove('dark');
                    this.sunIcon.classList.remove('hidden');
                    this.moonIcon.classList.add('hidden');
                }
            }

            highlightCurrentPage() {
                const currentPath = window.location.pathname.toLowerCase();
                const navItems = document.querySelectorAll('.nav-item');

                navItems.forEach(item => {
                    const href = item.getAttribute('href').toLowerCase();
                    const isActive = (currentPath === '/' && href === '/') ||
                                   (currentPath !== '/' && currentPath.startsWith(href) && href !== '/');

                    if (isActive) {
                        item.classList.add('bg-pink-100', 'dark:bg-pink-300/30', 'text-pink-700', 'dark:text-pink-100', 'border-r-4', 'border-pink-300');
                        item.classList.remove('text-zinc-700', 'dark:text-zinc-200');
                    } else {
                        item.classList.remove('bg-pink-100', 'dark:bg-pink-300/30', 'text-pink-700', 'dark:text-pink-100', 'border-r-4', 'border-pink-300');
                        item.classList.add('text-zinc-700', 'dark:text-zinc-100');
                    }
                });
            }

            storePreference(key, value) {
                try {
                    localStorage.setItem(key, JSON.stringify(value));
                } catch (e) {
                    console.warn('Could not save preference to localStorage:', e);
                }
            }

            getStoredPreference(key, defaultValue) {
                try {
                    const stored = localStorage.getItem(key);
                    return stored ? JSON.parse(stored) : defaultValue;
                } catch (e) {
                    console.warn('Could not read preference from localStorage:', e);
                    return defaultValue;
                }
            }
        }

        // Initialize the layout manager when DOM is loaded
        document.addEventListener('DOMContentLoaded', () => {
            new LayoutManager();
        });
    </script>
</body>
</html>